{
    "sourceFile": "controllers/authController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1753424241796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753769297954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+const db = require('../config/db');\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+exports.register = async (req, res) => {\r\n+  const { username, password, name, role, department } = req.body;\r\n+\r\n+  try {\r\n+    const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n+    if (userCheck.length > 0) {\r\n+      return res.status(400).json({ message: 'Username already exists' });\r\n+    }\r\n+\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    await db.query(\r\n+      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n+      [username, hashedPassword, name, role || 'user', department]\r\n+    );\r\n+    res.status(201).json({ message: 'Registered successfully' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Server error', error: err.message });\r\n+  }\r\n+};\r\n+\r\n+exports.login = async (req, res) => {\r\n+  const { username, password } = req.body;\r\n+\r\n+  try {\r\n+    const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n+    if (rows.length === 0) {\r\n+      return res.status(401).json({ message: 'Invalid username or password' });\r\n+    }\r\n+\r\n+    const user = rows[0];\r\n+    const match = await bcrypt.compare(password, user.password);\r\n+    if (!match) {\r\n+      return res.status(401).json({ message: 'Invalid username or password' });\r\n+    }\r\n+\r\n+    const token = jwt.sign(\r\n+      { id: user.id, role: user.role, name: user.name },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '2h' }\r\n+    );\r\n+\r\n+    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Server error', error: err.message });\r\n+  }\r\n+};\r\n+\r\n+\r\n"
                },
                {
                    "date": 1753769494499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,57 +47,4 @@\n   } catch (err) {\r\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n };\r\n-\r\n-\r\n-const db = require('../config/db');\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-exports.register = async (req, res) => {\r\n-  const { username, password, name, role, department } = req.body;\r\n-\r\n-  try {\r\n-    const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n-    if (userCheck.length > 0) {\r\n-      return res.status(400).json({ message: 'Username already exists' });\r\n-    }\r\n-\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    await db.query(\r\n-      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n-      [username, hashedPassword, name, role || 'user', department]\r\n-    );\r\n-    res.status(201).json({ message: 'Registered successfully' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Server error', error: err.message });\r\n-  }\r\n-};\r\n-\r\n-exports.login = async (req, res) => {\r\n-  const { username, password } = req.body;\r\n-\r\n-  try {\r\n-    const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n-    if (rows.length === 0) {\r\n-      return res.status(401).json({ message: 'Invalid username or password' });\r\n-    }\r\n-\r\n-    const user = rows[0];\r\n-    const match = await bcrypt.compare(password, user.password);\r\n-    if (!match) {\r\n-      return res.status(401).json({ message: 'Invalid username or password' });\r\n-    }\r\n-\r\n-    const token = jwt.sign(\r\n-      { id: user.id, role: user.role, name: user.name },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '2h' }\r\n-    );\r\n-\r\n-    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Server error', error: err.message });\r\n-  }\r\n-};\r\n-\r\n"
                },
                {
                    "date": 1753849549666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,4 +47,6 @@\n   } catch (err) {\r\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n };\r\n+\r\n+\r\n"
                },
                {
                    "date": 1753859620809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+const db = require('../config/db');\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+exports.register = async (req, res) => {\r\n+  const { username, password, name, role, department } = req.body;\r\n+\r\n+  try {\r\n+    const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n+    if (userCheck.length > 0) {\r\n+      return res.status(400).json({ message: 'Username already exists' });\r\n+    }\r\n+\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    await db.query(\r\n+      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n+      [username, hashedPassword, name, role || 'user', department]\r\n+    );\r\n+    res.status(201).json({ message: 'Registered successfully' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Server error', error: err.message });\r\n+  }\r\n+};\r\n+\r\n+exports.login = async (req, res) => {\r\n+  const { username, password } = req.body;\r\n+\r\n+  try {\r\n+    const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n+    if (rows.length === 0) {\r\n+      return res.status(401).json({ message: 'Invalid username or password' });\r\n+    }\r\n+\r\n+    const user = rows[0];\r\n+    const match = await bcrypt.compare(password, user.password);\r\n+    if (!match) {\r\n+      return res.status(401).json({ message: 'Invalid username or password' });\r\n+    }\r\n+\r\n+    const token = jwt.sign(\r\n+      { id: user.id, role: user.role, name: user.name },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '2h' }\r\n+    );\r\n+\r\n+    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Server error', error: err.message });\r\n+  }\r\n+};\r\n+\r\n+exports.getDevices = async (req, res) => {\r\n+  try {\r\n+    const [rows] = await db.query('SELECT * FROM devices');\r\n+    res.json(rows);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error loading devices', error: err.message });\r\n+  }\r\n+};\r\n+\r\n+router.get('/devices', async (req, res) => {\r\n+  try {\r\n+    const [rows] = await db.query('SELECT * FROM devices');\r\n+    console.log('📦 Devices:', rows); // 👈 ตรงนี้\r\n+    res.json(rows);\r\n+  } catch (err) {\r\n+    console.error('❌ Error fetching devices:', err);\r\n+    res.status(500).json({ error: 'Server error' });\r\n+  }\r\n+});\r\n+\r\n"
                },
                {
                    "date": 1753929926935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,76 +48,13 @@\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n };\r\n \r\n-exports.getDevices = async (req, res) => {\r\n+exports.getAllDevices = async (req, res) => {\r\n   try {\r\n-    const [rows] = await db.query('SELECT * FROM devices');\r\n-    res.json(rows);\r\n+    const [devices] = await db.query('SELECT * FROM devices');\r\n+    res.json(devices);\r\n   } catch (err) {\r\n-    res.status(500).json({ message: 'Error loading devices', error: err.message });\r\n+    console.error(err);\r\n+    res.status(500).json({ message: 'เกิดข้อผิดพลาดในการดึงข้อมูลอุปกรณ์' });\r\n   }\r\n };\r\n-\r\n-router.get('/devices', async (req, res) => {\r\n-  try {\r\n-    const [rows] = await db.query('SELECT * FROM devices');\r\n-    console.log('📦 Devices:', rows); // 👈 ตรงนี้\r\n-    res.json(rows);\r\n-  } catch (err) {\r\n-    console.error('❌ Error fetching devices:', err);\r\n-    res.status(500).json({ error: 'Server error' });\r\n-  }\r\n-});\r\n-\r\n-const db = require('../config/db');\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-exports.register = async (req, res) => {\r\n-  const { username, password, name, role, department } = req.body;\r\n-\r\n-  try {\r\n-    const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n-    if (userCheck.length > 0) {\r\n-      return res.status(400).json({ message: 'Username already exists' });\r\n-    }\r\n-\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    await db.query(\r\n-      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n-      [username, hashedPassword, name, role || 'user', department]\r\n-    );\r\n-    res.status(201).json({ message: 'Registered successfully' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Server error', error: err.message });\r\n-  }\r\n-};\r\n-\r\n-exports.login = async (req, res) => {\r\n-  const { username, password } = req.body;\r\n-\r\n-  try {\r\n-    const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n-    if (rows.length === 0) {\r\n-      return res.status(401).json({ message: 'Invalid username or password' });\r\n-    }\r\n-\r\n-    const user = rows[0];\r\n-    const match = await bcrypt.compare(password, user.password);\r\n-    if (!match) {\r\n-      return res.status(401).json({ message: 'Invalid username or password' });\r\n-    }\r\n-\r\n-    const token = jwt.sign(\r\n-      { id: user.id, role: user.role, name: user.name },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '2h' }\r\n-    );\r\n-\r\n-    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Server error', error: err.message });\r\n-  }\r\n-};\r\n-\r\n-\r\n"
                },
                {
                    "date": 1753930283593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,13 +48,5 @@\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n };\r\n \r\n-exports.getAllDevices = async (req, res) => {\r\n-  try {\r\n-    const [devices] = await db.query('SELECT * FROM devices');\r\n-    res.json(devices);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: 'เกิดข้อผิดพลาดในการดึงข้อมูลอุปกรณ์' });\r\n-  }\r\n-};\r\n+\r\n"
                },
                {
                    "date": 1753930598387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n const jwt = require('jsonwebtoken');\r\n \r\n exports.register = async (req, res) => {\r\n   const { username, password, name, role, department } = req.body;\r\n-\r\n   try {\r\n     const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n     if (userCheck.length > 0) {\r\n       return res.status(400).json({ message: 'Username already exists' });\r\n@@ -15,8 +14,9 @@\n     await db.query(\r\n       'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n       [username, hashedPassword, name, role || 'user', department]\r\n     );\r\n+\r\n     res.status(201).json({ message: 'Registered successfully' });\r\n   } catch (err) {\r\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n@@ -47,6 +47,4 @@\n   } catch (err) {\r\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n };\r\n-\r\n-\r\n"
                },
                {
                    "date": 1754367441384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,12 +36,12 @@\n     if (!match) {\r\n       return res.status(401).json({ message: 'Invalid username or password' });\r\n     }\r\n \r\n+    // สร้าง token โดยไม่กำหนด expiresIn → token จะไม่หมดอายุเอง\r\n     const token = jwt.sign(\r\n       { id: user.id, role: user.role, name: user.name },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '2h' }\r\n+      process.env.JWT_SECRET\r\n     );\r\n \r\n     res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1754368029408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \r\n     // สร้าง token โดยไม่กำหนด expiresIn → token จะไม่หมดอายุเอง\r\n     const token = jwt.sign(\r\n       { id: user.id, role: user.role, name: user.name },\r\n-      process.env.JWT_SECRET\r\n+      process.env.JWT_SECRETม\r\n     );\r\n \r\n     res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1754368036531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,10 @@\n \r\n     // สร้าง token โดยไม่กำหนด expiresIn → token จะไม่หมดอายุเอง\r\n     const token = jwt.sign(\r\n       { id: user.id, role: user.role, name: user.name },\r\n-      process.env.JWT_SECRETม\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '5h' }\r\n     );\r\n \r\n     res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1754368042699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     // สร้าง token โดยไม่กำหนด expiresIn → token จะไม่หมดอายุเอง\r\n     const token = jwt.sign(\r\n       { id: user.id, role: user.role, name: user.name },\r\n       process.env.JWT_SECRET,\r\n-      { expiresIn: '5h' }\r\n+      { expiresIn: 'h' }\r\n     );\r\n \r\n     res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n   } catch (err) {\r\n"
                },
                {
                    "date": 1754368072101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,9 @@\n \r\n     // สร้าง token โดยไม่กำหนด expiresIn → token จะไม่หมดอายุเอง\r\n     const token = jwt.sign(\r\n       { id: user.id, role: user.role, name: user.name },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: 'h' }\r\n+      process.env.JWT_SECRET\r\n     );\r\n \r\n     res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n   } catch (err) {\r\n"
                }
            ],
            "date": 1753424241796,
            "name": "Commit-0",
            "content": "const db = require('../config/db');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nexports.register = async (req, res) => {\r\n  const { username, password, name, role, department } = req.body;\r\n\r\n  try {\r\n    const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n    if (userCheck.length > 0) {\r\n      return res.status(400).json({ message: 'Username already exists' });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    await db.query(\r\n      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n      [username, hashedPassword, name, role || 'user', department]\r\n    );\r\n    res.status(201).json({ message: 'Registered successfully' });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n    if (rows.length === 0) {\r\n      return res.status(401).json({ message: 'Invalid username or password' });\r\n    }\r\n\r\n    const user = rows[0];\r\n    const match = await bcrypt.compare(password, user.password);\r\n    if (!match) {\r\n      return res.status(401).json({ message: 'Invalid username or password' });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { id: user.id, role: user.role, name: user.name },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '2h' }\r\n    );\r\n\r\n    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\n\r\n"
        }
    ]
}