{
    "sourceFile": "controllers/ImageUpload.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1755491915264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755492176572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,65 +1,65 @@\n-const multer = require(\"multer\");\r\n-const path = require(\"path\");\r\n-const pool = require(\"../config/db\"); // ใช้เชื่อมต่อ MySQL\r\n+// const multer = require(\"multer\");\r\n+// const path = require(\"path\");\r\n+// const pool = require(\"../config/db\"); // ใช้เชื่อมต่อ MySQL\r\n \r\n-// กำหนด storage ว่าจะเก็บไฟล์ไว้ที่ไหน + ตั้งชื่อไฟล์ใหม่\r\n-const storage = multer.diskStorage({\r\n-  destination: (req, file, cb) => {\r\n-    cb(null, path.join(__dirname, \"../uploads\")); // เก็บในโฟลเดอร์ uploads\r\n-  },\r\n-  filename: (req, file, cb) => {\r\n-    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n-    cb(null, uniqueSuffix + path.extname(file.originalname)); // ตั้งชื่อใหม่กันซ้ำ\r\n-  },\r\n-});\r\n+// // กำหนด storage ว่าจะเก็บไฟล์ไว้ที่ไหน + ตั้งชื่อไฟล์ใหม่\r\n+// const storage = multer.diskStorage({\r\n+//   destination: (req, file, cb) => {\r\n+//     cb(null, path.join(__dirname, \"../uploads\")); // เก็บในโฟลเดอร์ uploads\r\n+//   },\r\n+//   filename: (req, file, cb) => {\r\n+//     const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n+//     cb(null, uniqueSuffix + path.extname(file.originalname)); // ตั้งชื่อใหม่กันซ้ำ\r\n+//   },\r\n+// });\r\n \r\n-// filter เฉพาะไฟล์รูป\r\n-const fileFilter = (req, file, cb) => {\r\n-  const allowedTypes = /jpeg|jpg|png|gif/;\r\n-  const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\r\n-  const mimetype = allowedTypes.test(file.mimetype);\r\n+// // filter เฉพาะไฟล์รูป\r\n+// const fileFilter = (req, file, cb) => {\r\n+//   const allowedTypes = /jpeg|jpg|png|gif/;\r\n+//   const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\r\n+//   const mimetype = allowedTypes.test(file.mimetype);\r\n \r\n-  if (mimetype && extname) {\r\n-    cb(null, true);\r\n-  } else {\r\n-    cb(new Error(\"Only images are allowed (jpeg, jpg, png, gif)\"));\r\n-  }\r\n-};\r\n+//   if (mimetype && extname) {\r\n+//     cb(null, true);\r\n+//   } else {\r\n+//     cb(new Error(\"Only images are allowed (jpeg, jpg, png, gif)\"));\r\n+//   }\r\n+// };\r\n \r\n-// ตั้งค่า multer\r\n-const upload = multer({\r\n-  storage: storage,\r\n-  fileFilter: fileFilter,\r\n-});\r\n+// // ตั้งค่า multer\r\n+// const upload = multer({\r\n+//   storage: storage,\r\n+//   fileFilter: fileFilter,\r\n+// });\r\n \r\n-// controller สำหรับอัพโหลดรูป + บันทึกลง MySQL\r\n-const uploadImage = async (req, res) => {\r\n-  try {\r\n-    if (!req.file) {\r\n-      return res.status(400).json({ message: \"กรุณาเลือกไฟล์\" });\r\n-    }\r\n+// // controller สำหรับอัพโหลดรูป + บันทึกลง MySQL\r\n+// const uploadImage = async (req, res) => {\r\n+//   try {\r\n+//     if (!req.file) {\r\n+//       return res.status(400).json({ message: \"กรุณาเลือกไฟล์\" });\r\n+//     }\r\n \r\n-    const { deviceId } = req.body; // frontend จะส่ง deviceId มาด้วย\r\n-    const imagePath = req.file.filename; // เก็บเฉพาะชื่อไฟล์ใน DB\r\n+//     const { deviceId } = req.body; // frontend จะส่ง deviceId มาด้วย\r\n+//     const imagePath = req.file.filename; // เก็บเฉพาะชื่อไฟล์ใน DB\r\n \r\n-    // update ตาราง devices โดยบันทึกรูปลง column image\r\n-    await pool.query(\"UPDATE devices SET image = ? WHERE id = ?\", [\r\n-      imagePath,\r\n-      deviceId,\r\n-    ]);\r\n+//     // update ตาราง devices โดยบันทึกรูปลง column image\r\n+//     await pool.query(\"UPDATE devices SET image = ? WHERE id = ?\", [\r\n+//       imagePath,\r\n+//       deviceId,\r\n+//     ]);\r\n \r\n-    res.json({\r\n-      message: \"อัพโหลดสำเร็จ\",\r\n-      filename: imagePath,\r\n-      url: `/uploads/${imagePath}`,\r\n-    });\r\n-  } catch (err) {\r\n-    console.error(\"Upload error:\", err);\r\n-    res.status(500).json({ message: \"อัพโหลดไม่สำเร็จ\", error: err.message });\r\n-  }\r\n-};\r\n+//     res.json({\r\n+//       message: \"อัพโหลดสำเร็จ\",\r\n+//       filename: imagePath,\r\n+//       url: `/uploads/${imagePath}`,\r\n+//     });\r\n+//   } catch (err) {\r\n+//     console.error(\"Upload error:\", err);\r\n+//     res.status(500).json({ message: \"อัพโหลดไม่สำเร็จ\", error: err.message });\r\n+//   }\r\n+// };\r\n \r\n-module.exports = {\r\n-  upload,\r\n-  uploadImage,\r\n-};\r\n+// module.exports = {\r\n+//   upload,\r\n+//   uploadImage,\r\n+// };\r\n"
                },
                {
                    "date": 1755495046790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,65 +1,12 @@\n-// const multer = require(\"multer\");\r\n-// const path = require(\"path\");\r\n-// const pool = require(\"../config/db\"); // ใช้เชื่อมต่อ MySQL\r\n+const multer = require(\"multer\");\r\n+const path = require(\"path\");\r\n \r\n-// // กำหนด storage ว่าจะเก็บไฟล์ไว้ที่ไหน + ตั้งชื่อไฟล์ใหม่\r\n-// const storage = multer.diskStorage({\r\n-//   destination: (req, file, cb) => {\r\n-//     cb(null, path.join(__dirname, \"../uploads\")); // เก็บในโฟลเดอร์ uploads\r\n-//   },\r\n-//   filename: (req, file, cb) => {\r\n-//     const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n-//     cb(null, uniqueSuffix + path.extname(file.originalname)); // ตั้งชื่อใหม่กันซ้ำ\r\n-//   },\r\n-// });\r\n+// เก็บไฟล์ในโฟลเดอร์ uploads/\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => cb(null, \"uploads/\"),\r\n+  filename: (req, file, cb) => cb(null, Date.now() + path.extname(file.originalname)),\r\n+});\r\n \r\n-// // filter เฉพาะไฟล์รูป\r\n-// const fileFilter = (req, file, cb) => {\r\n-//   const allowedTypes = /jpeg|jpg|png|gif/;\r\n-//   const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\r\n-//   const mimetype = allowedTypes.test(file.mimetype);\r\n+const upload = multer({ storage });\r\n \r\n-//   if (mimetype && extname) {\r\n-//     cb(null, true);\r\n-//   } else {\r\n-//     cb(new Error(\"Only images are allowed (jpeg, jpg, png, gif)\"));\r\n-//   }\r\n-// };\r\n-\r\n-// // ตั้งค่า multer\r\n-// const upload = multer({\r\n-//   storage: storage,\r\n-//   fileFilter: fileFilter,\r\n-// });\r\n-\r\n-// // controller สำหรับอัพโหลดรูป + บันทึกลง MySQL\r\n-// const uploadImage = async (req, res) => {\r\n-//   try {\r\n-//     if (!req.file) {\r\n-//       return res.status(400).json({ message: \"กรุณาเลือกไฟล์\" });\r\n-//     }\r\n-\r\n-//     const { deviceId } = req.body; // frontend จะส่ง deviceId มาด้วย\r\n-//     const imagePath = req.file.filename; // เก็บเฉพาะชื่อไฟล์ใน DB\r\n-\r\n-//     // update ตาราง devices โดยบันทึกรูปลง column image\r\n-//     await pool.query(\"UPDATE devices SET image = ? WHERE id = ?\", [\r\n-//       imagePath,\r\n-//       deviceId,\r\n-//     ]);\r\n-\r\n-//     res.json({\r\n-//       message: \"อัพโหลดสำเร็จ\",\r\n-//       filename: imagePath,\r\n-//       url: `/uploads/${imagePath}`,\r\n-//     });\r\n-//   } catch (err) {\r\n-//     console.error(\"Upload error:\", err);\r\n-//     res.status(500).json({ message: \"อัพโหลดไม่สำเร็จ\", error: err.message });\r\n-//   }\r\n-// };\r\n-\r\n-// module.exports = {\r\n-//   upload,\r\n-//   uploadImage,\r\n-// };\r\n+module.exports = upload;\r\n"
                },
                {
                    "date": 1755495237168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,18 @@\n-const multer = require(\"multer\");\r\n-const path = require(\"path\");\r\n+const multer = require('multer');\r\n+const path = require('path');\r\n \r\n-// เก็บไฟล์ในโฟลเดอร์ uploads/\r\n+// ตั้งค่า storage ของ multer\r\n const storage = multer.diskStorage({\r\n-  destination: (req, file, cb) => cb(null, \"uploads/\"),\r\n-  filename: (req, file, cb) => cb(null, Date.now() + path.extname(file.originalname)),\r\n+  destination: (req, file, cb) => {\r\n+    cb(null, 'uploads/');\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+    // ตั้งชื่อไฟล์เป็น timestamp + extension เดิม\r\n+    cb(null, Date.now() + path.extname(file.originalname));\r\n+  }\r\n });\r\n \r\n+// กำหนด multer\r\n const upload = multer({ storage });\r\n \r\n module.exports = upload;\r\n"
                },
                {
                    "date": 1755497592399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n   destination: (req, file, cb) => {\r\n     cb(null, 'uploads/');\r\n   },\r\n   filename: (req, file, cb) => {\r\n-    // ตั้งชื่อไฟล์เป็น timestamp + extension เดิม\r\n     cb(null, Date.now() + path.extname(file.originalname));\r\n   }\r\n });\r\n \r\n"
                },
                {
                    "date": 1755497793595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n const multer = require('multer');\r\n const path = require('path');\r\n \r\n-// ตั้งค่า storage ของ multer\r\n const storage = multer.diskStorage({\r\n   destination: (req, file, cb) => {\r\n     cb(null, 'uploads/');\r\n   },\r\n@@ -10,8 +9,7 @@\n     cb(null, Date.now() + path.extname(file.originalname));\r\n   }\r\n });\r\n \r\n-// กำหนด multer\r\n const upload = multer({ storage });\r\n \r\n-module.exports = upload;\r\n+module.exports = upload; // ต้องแน่ใจว่า export ถูกต้อง\r\n"
                },
                {
                    "date": 1759985093950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-const multer = require('multer');\r\n-const path = require('path');\r\n+// const multer = require('multer');\r\n+// const path = require('path');\r\n \r\n-const storage = multer.diskStorage({\r\n-  destination: (req, file, cb) => {\r\n-    cb(null, 'uploads/');\r\n-  },\r\n-  filename: (req, file, cb) => {\r\n-    cb(null, Date.now() + path.extname(file.originalname));\r\n-  }\r\n-});\r\n+// const storage = multer.diskStorage({\r\n+//   destination: (req, file, cb) => {\r\n+//     cb(null, 'uploads/');\r\n+//   },\r\n+//   filename: (req, file, cb) => {\r\n+//     cb(null, Date.now() + path.extname(file.originalname));\r\n+//   }\r\n+// });\r\n \r\n-const upload = multer({ storage });\r\n+// const upload = multer({ storage });\r\n \r\n module.exports = upload; // ต้องแน่ใจว่า export ถูกต้อง\r\n"
                },
                {
                    "date": 1759985112401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,5 +11,5 @@\n // });\r\n \r\n // const upload = multer({ storage });\r\n \r\n-module.exports = upload; // ต้องแน่ใจว่า export ถูกต้อง\r\n+// module.exports = upload; \r\n"
                },
                {
                    "date": 1759985480618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-// const multer = require('multer');\r\n-// const path = require('path');\r\n+const multer = require('multer');\r\n+const path = require('path');\r\n \r\n-// const storage = multer.diskStorage({\r\n-//   destination: (req, file, cb) => {\r\n-//     cb(null, 'uploads/');\r\n-//   },\r\n-//   filename: (req, file, cb) => {\r\n-//     cb(null, Date.now() + path.extname(file.originalname));\r\n-//   }\r\n-// });\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => {\r\n+    cb(null, 'uploads/');\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+    cb(null, Date.now() + path.extname(file.originalname));\r\n+  }\r\n+});\r\n \r\n-// const upload = multer({ storage });\r\n+const upload = multer({ storage });\r\n \r\n-// module.exports = upload; \r\n+module.exports = upload; \r\n"
                }
            ],
            "date": 1755491915264,
            "name": "Commit-0",
            "content": "const multer = require(\"multer\");\r\nconst path = require(\"path\");\r\nconst pool = require(\"../config/db\"); // ใช้เชื่อมต่อ MySQL\r\n\r\n// กำหนด storage ว่าจะเก็บไฟล์ไว้ที่ไหน + ตั้งชื่อไฟล์ใหม่\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, path.join(__dirname, \"../uploads\")); // เก็บในโฟลเดอร์ uploads\r\n  },\r\n  filename: (req, file, cb) => {\r\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n    cb(null, uniqueSuffix + path.extname(file.originalname)); // ตั้งชื่อใหม่กันซ้ำ\r\n  },\r\n});\r\n\r\n// filter เฉพาะไฟล์รูป\r\nconst fileFilter = (req, file, cb) => {\r\n  const allowedTypes = /jpeg|jpg|png|gif/;\r\n  const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\r\n  const mimetype = allowedTypes.test(file.mimetype);\r\n\r\n  if (mimetype && extname) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new Error(\"Only images are allowed (jpeg, jpg, png, gif)\"));\r\n  }\r\n};\r\n\r\n// ตั้งค่า multer\r\nconst upload = multer({\r\n  storage: storage,\r\n  fileFilter: fileFilter,\r\n});\r\n\r\n// controller สำหรับอัพโหลดรูป + บันทึกลง MySQL\r\nconst uploadImage = async (req, res) => {\r\n  try {\r\n    if (!req.file) {\r\n      return res.status(400).json({ message: \"กรุณาเลือกไฟล์\" });\r\n    }\r\n\r\n    const { deviceId } = req.body; // frontend จะส่ง deviceId มาด้วย\r\n    const imagePath = req.file.filename; // เก็บเฉพาะชื่อไฟล์ใน DB\r\n\r\n    // update ตาราง devices โดยบันทึกรูปลง column image\r\n    await pool.query(\"UPDATE devices SET image = ? WHERE id = ?\", [\r\n      imagePath,\r\n      deviceId,\r\n    ]);\r\n\r\n    res.json({\r\n      message: \"อัพโหลดสำเร็จ\",\r\n      filename: imagePath,\r\n      url: `/uploads/${imagePath}`,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Upload error:\", err);\r\n    res.status(500).json({ message: \"อัพโหลดไม่สำเร็จ\", error: err.message });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  upload,\r\n  uploadImage,\r\n};\r\n"
        }
    ]
}