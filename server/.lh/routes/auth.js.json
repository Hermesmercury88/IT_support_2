{
    "sourceFile": "routes/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1753344588749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753345749337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,72 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const mysql = require('mysql2/promise');\r\n-const bcrypt = require('bcrypt');\r\n+const pool = require('../database'); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° DB\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n \r\n-const pool = mysql.createPool({\r\n-  host: process.env.DB_HOST,\r\n-  user: process.env.DB_USER,\r\n-  password: process.env.DB_PASSWORD,\r\n-  database: process.env.DB_NAME,\r\n+// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\r\n+router.post('/register', async (req, res) => {\r\n+  const { username, password, name, role = 'user', department } = req.body;\r\n+\r\n+  if (!username || !password)\r\n+    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });\r\n+\r\n+  try {\r\n+    // ‡πÄ‡∏ä‡πá‡∏Ñ username ‡∏ã‡πâ‡∏≥\r\n+    const [existing] = await pool.query('SELECT id FROM users WHERE username = ?', [username]);\r\n+    if (existing.length > 0)\r\n+      return res.status(409).json({ message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });\r\n+\r\n+    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ password\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    const [result] = await pool.query(\r\n+      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n+      [username, hashedPassword, name || null, role, department || null]\r\n+    );\r\n+\r\n+    res.status(201).json({ message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', userId: result.insertId });\r\n+  } catch (err) {\r\n+    console.error('Register error:', err);\r\n+    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });\r\n+  }\r\n });\r\n \r\n-// POST /api/login\r\n+// Login\r\n router.post('/login', async (req, res) => {\r\n   const { username, password } = req.body;\r\n+\r\n+  if (!username || !password)\r\n+    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });\r\n+\r\n   try {\r\n     const [rows] = await pool.query('SELECT * FROM users WHERE username = ?', [username]);\r\n-    if (rows.length === 0) return res.status(401).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });\r\n+    if (rows.length === 0)\r\n+      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });\r\n \r\n     const user = rows[0];\r\n-    const validPassword = await bcrypt.compare(password, user.password);\r\n-    if (!validPassword) return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n \r\n-    // ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏´‡∏£‡∏∑‡∏≠ session ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\r\n-    return res.json({ message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', user: { id: user.id, username: user.username, role: user.role } });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });\r\n-  }\r\n-});\r\n+    if (!isMatch)\r\n+      return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });\r\n \r\n-// POST /api/register\r\n-router.post('/register', async (req, res) => {\r\n-  const { username, password, name, role = 'user', department } = req.body;\r\n-  try {\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    const [result] = await pool.query(\r\n-      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n-      [username, hashedPassword, name, role, department]\r\n+    const token = jwt.sign(\r\n+      {\r\n+        id: user.id,\r\n+        username: user.username,\r\n+        name: user.name,\r\n+        role: user.role,\r\n+        department: user.department,\r\n+      },\r\n+      process.env.ACCESS_TOKEN_SECRET,\r\n+      { expiresIn: '20h' }\r\n     );\r\n-    res.json({ message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', userId: result.insertId });\r\n+\r\n+    res.json({ token });\r\n   } catch (err) {\r\n-    console.error(err);\r\n+    console.error('Login error:', err);\r\n     res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });\r\n   }\r\n });\r\n \r\n module.exports = router;\r\n-\r\n"
                },
                {
                    "date": 1753408884108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const jwt = require('jsonwebtoken');\r\n \r\n // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\r\n router.post('/register', async (req, res) => {\r\n-  const { username, password, name, role = 'user', department } = req.body;\r\n+  const { username, password, name, role = 'user‡∏´', department } = req.body;\r\n \r\n   if (!username || !password)\r\n     return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });\r\n \r\n"
                },
                {
                    "date": 1753409310863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const jwt = require('jsonwebtoken');\r\n \r\n // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\r\n router.post('/register', async (req, res) => {\r\n-  const { username, password, name, role = 'user‡∏´', department } = req.body;\r\n+  const { username, password, name, role = 'user', department } = req.body;\r\n \r\n   if (!username || !password)\r\n     return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });\r\n \r\n"
                },
                {
                    "date": 1753409499607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,6 @@\n     res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });\r\n   }\r\n });\r\n \r\n+\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753409591182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,10 @@\n // Login\r\n router.post('/login', async (req, res) => {\r\n   const { username, password } = req.body;\r\n \r\n+  console.log('Login attempt:', { username, password }); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° log\r\n+\r\n   if (!username || !password)\r\n     return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1753410699076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,49 @@\n+// routes/auth.js\r\n const express = require('express');\r\n+const jwt = require('jsonwebtoken');\r\n+const db = require('../db');\r\n const router = express.Router();\r\n-const pool = require('../database'); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° DB\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n \r\n-// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\r\n-router.post('/register', async (req, res) => {\r\n-  const { username, password, name, role = 'user', department } = req.body;\r\n+const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n-  if (!username || !password)\r\n-    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });\r\n+// ‚úÖ POST /api/auth/login\r\n+router.post('/login', (req, res) => {\r\n+  const { username, password } = req.body;\r\n \r\n-  try {\r\n-    // ‡πÄ‡∏ä‡πá‡∏Ñ username ‡∏ã‡πâ‡∏≥\r\n-    const [existing] = await pool.query('SELECT id FROM users WHERE username = ?', [username]);\r\n-    if (existing.length > 0)\r\n-      return res.status(409).json({ message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });\r\n+  db.query(\r\n+    'SELECT * FROM users WHERE username = ? AND password = ?',\r\n+    [username, password],\r\n+    (err, results) => {\r\n+      if (err) {\r\n+        return res.status(500).json({ error: 'Database error' });\r\n+      }\r\n \r\n-    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ password\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n+      if (results.length === 0) {\r\n+        return res.status(401).json({ error: 'Invalid credentials' });\r\n+      }\r\n \r\n-    const [result] = await pool.query(\r\n-      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n-      [username, hashedPassword, name || null, role, department || null]\r\n-    );\r\n+      // ‡∏™‡∏£‡πâ‡∏≤‡∏á token\r\n+      const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: '1h' });\r\n \r\n-    res.status(201).json({ message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', userId: result.insertId });\r\n-  } catch (err) {\r\n-    console.error('Register error:', err);\r\n-    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });\r\n-  }\r\n+      res.json({ token });\r\n+    }\r\n+  );\r\n });\r\n \r\n-// Login\r\n-router.post('/login', async (req, res) => {\r\n+// ‚úÖ POST /api/auth/register\r\n+router.post('/register', (req, res) => {\r\n   const { username, password } = req.body;\r\n \r\n-  console.log('Login attempt:', { username, password }); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° log\r\n-\r\n-  if (!username || !password)\r\n-    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });\r\n-\r\n-  try {\r\n-    const [rows] = await pool.query('SELECT * FROM users WHERE username = ?', [username]);\r\n-    if (rows.length === 0)\r\n-      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });\r\n-\r\n-    const user = rows[0];\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-\r\n-    if (!isMatch)\r\n-      return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });\r\n-\r\n-    const token = jwt.sign(\r\n-      {\r\n-        id: user.id,\r\n-        username: user.username,\r\n-        name: user.name,\r\n-        role: user.role,\r\n-        department: user.department,\r\n-      },\r\n-      process.env.ACCESS_TOKEN_SECRET,\r\n-      { expiresIn: '20h' }\r\n-    );\r\n-\r\n-    res.json({ token });\r\n-  } catch (err) {\r\n-    console.error('Login error:', err);\r\n-    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });\r\n-  }\r\n+  db.query(\r\n+    'INSERT INTO users (username, password) VALUES (?, ?)',\r\n+    [username, password],\r\n+    (err, result) => {\r\n+      if (err) {\r\n+        return res.status(500).json({ error: 'Error registering user' });\r\n+      }\r\n+      res.json({ message: 'User registered successfully' });\r\n+    }\r\n+  );\r\n });\r\n \r\n-\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753410732591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,47 @@\n // routes/auth.js\r\n const express = require('express');\r\n const jwt = require('jsonwebtoken');\r\n-const db = require('../db');\r\n+const db = require('../db'); // pool ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ\r\n const router = express.Router();\r\n \r\n const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n // ‚úÖ POST /api/auth/login\r\n-router.post('/login', (req, res) => {\r\n+router.post('/login', async (req, res) => {\r\n   const { username, password } = req.body;\r\n \r\n-  db.query(\r\n-    'SELECT * FROM users WHERE username = ? AND password = ?',\r\n-    [username, password],\r\n-    (err, results) => {\r\n-      if (err) {\r\n-        return res.status(500).json({ error: 'Database error' });\r\n-      }\r\n+  try {\r\n+    const [rows] = await db.query(\r\n+      'SELECT * FROM users WHERE username = ? AND password = ?',\r\n+      [username, password]\r\n+    );\r\n \r\n-      if (results.length === 0) {\r\n-        return res.status(401).json({ error: 'Invalid credentials' });\r\n-      }\r\n+    if (rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid credentials' });\r\n+    }\r\n \r\n-      // ‡∏™‡∏£‡πâ‡∏≤‡∏á token\r\n-      const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: '1h' });\r\n-\r\n-      res.json({ token });\r\n-    }\r\n-  );\r\n+    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: '1h' });\r\n+    res.json({ token });\r\n+  } catch (err) {\r\n+    console.error('Login error:', err);\r\n+    res.status(500).json({ error: 'Server error' });\r\n+  }\r\n });\r\n \r\n // ‚úÖ POST /api/auth/register\r\n-router.post('/register', (req, res) => {\r\n+router.post('/register', async (req, res) => {\r\n   const { username, password } = req.body;\r\n \r\n-  db.query(\r\n-    'INSERT INTO users (username, password) VALUES (?, ?)',\r\n-    [username, password],\r\n-    (err, result) => {\r\n-      if (err) {\r\n-        return res.status(500).json({ error: 'Error registering user' });\r\n-      }\r\n-      res.json({ message: 'User registered successfully' });\r\n-    }\r\n-  );\r\n+  try {\r\n+    await db.query(\r\n+      'INSERT INTO users (username, password) VALUES (?, ?)',\r\n+      [username, password]\r\n+    );\r\n+    res.json({ message: 'User registered successfully' });\r\n+  } catch (err) {\r\n+    console.error('Register error:', err);\r\n+    res.status(500).json({ error: 'Server error' });\r\n+  }\r\n });\r\n \r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753410742005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // routes/auth.js\r\n const express = require('express');\r\n const jwt = require('jsonwebtoken');\r\n-const db = require('../db'); // pool ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ\r\n+const db = require('../db'); \r\n const router = express.Router();\r\n \r\n const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n"
                },
                {
                    "date": 1753410749351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n-// routes/auth.js\r\n const express = require('express');\r\n const jwt = require('jsonwebtoken');\r\n-const db = require('../db'); \r\n+const db = require('../'); \r\n const router = express.Router();\r\n \r\n const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n"
                },
                {
                    "date": 1753411858852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,36 @@\n-const express = require('express');\r\n+const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n-const db = require('../'); \r\n-const router = express.Router();\r\n+const db = require('../config/db');\r\n+const router = require('express').Router();\r\n \r\n const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n-// ‚úÖ POST /api/auth/login\r\n router.post('/login', async (req, res) => {\r\n   const { username, password } = req.body;\r\n \r\n   try {\r\n-    const [rows] = await db.query(\r\n-      'SELECT * FROM users WHERE username = ? AND password = ?',\r\n-      [username, password]\r\n-    );\r\n+    const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n \r\n     if (rows.length === 0) {\r\n       return res.status(401).json({ error: 'Invalid credentials' });\r\n     }\r\n \r\n-    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: '1h' });\r\n-    res.json({ token });\r\n-  } catch (err) {\r\n-    console.error('Login error:', err);\r\n-    res.status(500).json({ error: 'Server error' });\r\n-  }\r\n-});\r\n+    const user = rows[0];\r\n+    const match = await bcrypt.compare(password, user.password);\r\n \r\n-// ‚úÖ POST /api/auth/register\r\n-router.post('/register', async (req, res) => {\r\n-  const { username, password } = req.body;\r\n+    if (!match) {\r\n+      return res.status(401).json({ error: 'Invalid credentials' });\r\n+    }\r\n \r\n-  try {\r\n-    await db.query(\r\n-      'INSERT INTO users (username, password) VALUES (?, ?)',\r\n-      [username, password]\r\n+    const token = jwt.sign(\r\n+      { id: user.id, role: user.role, name: user.name },\r\n+      JWT_SECRET,\r\n+      { expiresIn: '1h' }\r\n     );\r\n-    res.json({ message: 'User registered successfully' });\r\n+\r\n+    res.json({ token });\r\n   } catch (err) {\r\n-    console.error('Register error:', err);\r\n+    console.error('Login error:', err);\r\n     res.status(500).json({ error: 'Server error' });\r\n   }\r\n });\r\n-\r\n-module.exports = router;\r\n"
                },
                {
                    "date": 1753411997532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,60 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const db = require('../config/db');\r\n const bcrypt = require('bcryptjs');\r\n const jwt = require('jsonwebtoken');\r\n-const db = require('../config/db');\r\n-const router = require('express').Router();\r\n \r\n const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n+// ‚úÖ REGISTER\r\n+router.post('/register', async (req, res) => {\r\n+  const { username, password, name, role, department } = req.body;\r\n+\r\n+  try {\r\n+    const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n+    if (userCheck.length > 0) {\r\n+      return res.status(400).json({ message: 'Username already exists' });\r\n+    }\r\n+\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    await db.query(\r\n+      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n+      [username, hashedPassword, name, role || 'user', department]\r\n+    );\r\n+\r\n+    res.status(201).json({ message: 'Registered successfully' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Server error', error: err.message });\r\n+  }\r\n+});\r\n+\r\n+// ‚úÖ LOGIN\r\n router.post('/login', async (req, res) => {\r\n   const { username, password } = req.body;\r\n \r\n   try {\r\n     const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n \r\n     if (rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid credentials' });\r\n+      return res.status(401).json({ message: 'Invalid username or password' });\r\n     }\r\n \r\n     const user = rows[0];\r\n     const match = await bcrypt.compare(password, user.password);\r\n-\r\n     if (!match) {\r\n-      return res.status(401).json({ error: 'Invalid credentials' });\r\n+      return res.status(401).json({ message: 'Invalid username or password' });\r\n     }\r\n \r\n     const token = jwt.sign(\r\n-      { id: user.id, role: user.role, name: user.name },\r\n+      { id: user.id, name: user.name, role: user.role },\r\n       JWT_SECRET,\r\n-      { expiresIn: '1h' }\r\n+      { expiresIn: '2h' }\r\n     );\r\n \r\n-    res.json({ token });\r\n+    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n   } catch (err) {\r\n-    console.error('Login error:', err);\r\n-    res.status(500).json({ error: 'Server error' });\r\n+    res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n });\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1753423598919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n const jwt = require('jsonwebtoken');\r\n \r\n const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n-// ‚úÖ REGISTER\r\n+//  REGISTER\r\n router.post('/register', async (req, res) => {\r\n   const { username, password, name, role, department } = req.body;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1753423620737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n });\r\n \r\n-// ‚úÖ LOGIN\r\n+//  LOGIN\r\n router.post('/login', async (req, res) => {\r\n   const { username, password } = req.body;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1753849698242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,5 +56,7 @@\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n });\r\n \r\n+\r\n+\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753849710753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,7 +56,15 @@\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n });\r\n \r\n+//  GET DEVICES\r\n+router.get('/devices', async (req, res) => {\r\n+  try {\r\n+    const [rows] = await db.query('SELECT * FROM devices');\r\n+    res.json(rows);\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Error loading devices', error: err.message });\r\n+  }\r\n+});\r\n \r\n-\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753930020187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,5 +66,7 @@\n     res.status(500).json({ message: 'Error loading devices', error: err.message });\r\n   }\r\n });\r\n \r\n+router.get('/devices', deviceController.getAllDevices);\r\n+\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1754034691999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+const express = require('express');\r\n+const router = express.Router();\r\n+const db = require('../config/db');\r\n+const bcrypt = require('bcryptjs');\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+const JWT_SECRET = process.env.JWT_SECRET;\r\n+\r\n+//  REGISTER\r\n+router.post('/register', async (req, res) => {\r\n+  const { username, password, name, role, department } = req.body;\r\n+\r\n+  try {\r\n+    const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n+    if (userCheck.length > 0) {\r\n+      return res.status(400).json({ message: 'Username already exists' });\r\n+    }\r\n+\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    await db.query(\r\n+      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n+      [username, hashedPassword, name, role || 'user', department]\r\n+    );\r\n+\r\n+    res.status(201).json({ message: 'Registered successfully' });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Server error', error: err.message });\r\n+  }\r\n+});\r\n+\r\n+//  LOGIN\r\n+router.post('/login', async (req, res) => {\r\n+  const { username, password } = req.body;\r\n+\r\n+  try {\r\n+    const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n+\r\n+    if (rows.length === 0) {\r\n+      return res.status(401).json({ message: 'Invalid username or password' });\r\n+    }\r\n+\r\n+    const user = rows[0];\r\n+    const match = await bcrypt.compare(password, user.password);\r\n+    if (!match) {\r\n+      return res.status(401).json({ message: 'Invalid username or password' });\r\n+    }\r\n+\r\n+    const token = jwt.sign(\r\n+      { id: user.id, name: user.name, role: user.role },\r\n+      JWT_SECRET,\r\n+      { expiresIn: '2h' }\r\n+    );\r\n+\r\n+    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n+  } catch (err) {\r\n+    res.status(500).json({ message: 'Server error', error: err.message });\r\n+  }\r\n+});\r\n+\r\n+//  GET DEVICES\r\n+// router.get('/devices', async (req, res) => {\r\n+//   try {\r\n+//     const [rows] = await db.query('SELECT * FROM devices');\r\n+//     res.json(rows);\r\n+//   } catch (err) {\r\n+//     res.status(500).json({ message: 'Error loading devices', error: err.message });\r\n+//   }\r\n+// });\r\n+\r\n+// router.get('/devices', deviceController.getAllDevices);\r\n+\r\n+module.exports = router;\r\n"
                },
                {
                    "date": 1754274060772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,89 +56,6 @@\n     res.status(500).json({ message: 'Server error', error: err.message });\r\n   }\r\n });\r\n \r\n-//  GET DEVICES\r\n-// router.get('/devices', async (req, res) => {\r\n-//   try {\r\n-//     const [rows] = await db.query('SELECT * FROM devices');\r\n-//     res.json(rows);\r\n-//   } catch (err) {\r\n-//     res.status(500).json({ message: 'Error loading devices', error: err.message });\r\n-//   }\r\n-// });\r\n \r\n-// router.get('/devices', deviceController.getAllDevices);\r\n-\r\n module.exports = router;\r\n-const express = require('express');\r\n-const router = express.Router();\r\n-const db = require('../config/db');\r\n-const bcrypt = require('bcryptjs');\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-const JWT_SECRET = process.env.JWT_SECRET;\r\n-\r\n-//  REGISTER\r\n-router.post('/register', async (req, res) => {\r\n-  const { username, password, name, role, department } = req.body;\r\n-\r\n-  try {\r\n-    const [userCheck] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n-    if (userCheck.length > 0) {\r\n-      return res.status(400).json({ message: 'Username already exists' });\r\n-    }\r\n-\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    await db.query(\r\n-      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n-      [username, hashedPassword, name, role || 'user', department]\r\n-    );\r\n-\r\n-    res.status(201).json({ message: 'Registered successfully' });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Server error', error: err.message });\r\n-  }\r\n-});\r\n-\r\n-//  LOGIN\r\n-router.post('/login', async (req, res) => {\r\n-  const { username, password } = req.body;\r\n-\r\n-  try {\r\n-    const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]);\r\n-\r\n-    if (rows.length === 0) {\r\n-      return res.status(401).json({ message: 'Invalid username or password' });\r\n-    }\r\n-\r\n-    const user = rows[0];\r\n-    const match = await bcrypt.compare(password, user.password);\r\n-    if (!match) {\r\n-      return res.status(401).json({ message: 'Invalid username or password' });\r\n-    }\r\n-\r\n-    const token = jwt.sign(\r\n-      { id: user.id, name: user.name, role: user.role },\r\n-      JWT_SECRET,\r\n-      { expiresIn: '2h' }\r\n-    );\r\n-\r\n-    res.json({ token, user: { id: user.id, name: user.name, role: user.role } });\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Server error', error: err.message });\r\n-  }\r\n-});\r\n-\r\n-//  GET DEVICES\r\n-router.get('/devices', async (req, res) => {\r\n-  try {\r\n-    const [rows] = await db.query('SELECT * FROM devices');\r\n-    res.json(rows);\r\n-  } catch (err) {\r\n-    res.status(500).json({ message: 'Error loading devices', error: err.message });\r\n-  }\r\n-});\r\n-\r\n-router.get('/devices', deviceController.getAllDevices);\r\n-\r\n-module.exports = router;\r\n"
                }
            ],
            "date": 1753344588749,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst mysql = require('mysql2/promise');\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST,\r\n  user: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_NAME,\r\n});\r\n\r\n// POST /api/login\r\nrouter.post('/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n  try {\r\n    const [rows] = await pool.query('SELECT * FROM users WHERE username = ?', [username]);\r\n    if (rows.length === 0) return res.status(401).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });\r\n\r\n    const user = rows[0];\r\n    const validPassword = await bcrypt.compare(password, user.password);\r\n    if (!validPassword) return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });\r\n\r\n    // ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏´‡∏£‡∏∑‡∏≠ session ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\r\n    return res.json({ message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', user: { id: user.id, username: user.username, role: user.role } });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });\r\n  }\r\n});\r\n\r\n// POST /api/register\r\nrouter.post('/register', async (req, res) => {\r\n  const { username, password, name, role = 'user', department } = req.body;\r\n  try {\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const [result] = await pool.query(\r\n      'INSERT INTO users (username, password, name, role, department) VALUES (?, ?, ?, ?, ?)',\r\n      [username, hashedPassword, name, role, department]\r\n    );\r\n    res.json({ message: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', userId: result.insertId });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n"
        }
    ]
}